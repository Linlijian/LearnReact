{"version":3,"sources":["logo.svg","Person/Person.js","Validate/Validate.js","CharCard/CharCard.js","MasterPage/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Person","props","react_default","a","createElement","className","onClick","click","name","children","onChange","change","Validate","validateLength","textLength","CharCard","delete","style","display","padding","margin","border","textAlign","backgroundColor","varchar","App","state","age","person","id","isShowDiv","isShowAssignment","inputValues","onClickShowDiv","show","_this","setState","onClickShowAssignment","onChickDelete","personIndex","splice","onChickDeleteCard","index","card","split","newCard","join","inputChangeHendler","event","target","value","onChangeName","perosIndex","findIndex","perosnNew","Object","objectSpread","toConsumableArray","_this2","this","Assignment","map","src_Person_Person","key","charList","ch","src_CharCard_CharCard","type","src_Validate_Validate","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","MasterPage_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uMCazBC,qBAVA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,6BAAoDN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,UACVP,EAAAC,EAAAC,cAAA,SAAOM,SAAYT,EAAMU,YCItBC,EAVE,SAACX,GACd,IAAIY,EAAiB,iBAIrB,OAHIZ,EAAMa,WAAa,IACnBD,EAAiB,mBAEdX,EAAAC,EAAAC,cAAA,WACFS,ICQME,EAdE,SAACd,GASd,OACIC,EAAAC,EAAAC,cAAA,OAAKE,QAASL,EAAMe,OAAQC,MATlB,CACVC,QAAS,eACTC,QAAS,OACTC,OAAQ,OACRC,OAAQ,kBACRC,UAAW,SACXC,gBAAiB,WAG0BtB,EAAMuB,UCyH1CC,6MA3HbC,MAAQ,CACNlB,KAAM,IACNmB,IAAK,GACLC,OAAQ,CACN,CAAEC,GAAI,MAAOrB,KAAM,QAASmB,IAAK,IACjC,CAAEE,GAAI,MAAOrB,KAAM,OAAQmB,IAAK,GAChC,CAAEE,GAAI,MAAOrB,KAAM,OAAQmB,IAAK,KAElCG,WAAW,EACXC,kBAAkB,EAClBC,YAAa,MAGfC,eAAiB,WACf,IAAMC,EAAOC,EAAKT,MAAMI,UACxBK,EAAKC,SAAS,CAAEN,WAAYI,OAG9BG,sBAAwB,WACtB,IAAMH,EAAOC,EAAKT,MAAMK,iBACxBI,EAAKC,SAAS,CAAEL,kBAAmBG,OAGrCI,cAAgB,SAACC,GACf,IAAMX,EAASO,EAAKT,MAAME,OAC1BA,EAAOY,OAAOD,EAAa,GAC3BJ,EAAKC,SAAS,CAAER,OAAQA,OAG1Ba,kBAAoB,SAACC,GACnB,IAAMC,EAAOR,EAAKT,MAAMM,YAAYY,MAAM,IAC1CD,EAAKH,OAAOE,EAAO,GACnB,IAAMG,EAAUF,EAAKG,KAAK,IAC1BX,EAAKC,SAAS,CAAEJ,YAAaa,OAG/BE,mBAAqB,SAACC,GACpBb,EAAKC,SAAS,CAAEJ,YAAagB,EAAMC,OAAOC,WAG5CC,aAAe,SAACH,EAAOnB,GACrB,IAAMuB,EAAajB,EAAKT,MAAME,OAAOyB,UAAU,SAAAtD,GAE7C,OAAOA,EAAE8B,KAAOA,IAIZyB,EAASC,OAAAC,EAAA,EAAAD,CAAA,GACVpB,EAAKT,MAAME,OAAOwB,IAIvBE,EAAU9C,KAAOwC,EAAMC,OAAOC,MAG9B,IAAMtB,EAAM2B,OAAAE,EAAA,EAAAF,CAAOpB,EAAKT,MAAME,QAG9BA,EAAOwB,GAAcE,EAIrBnB,EAAKC,SAAS,CAAER,OAAQA,6EAIjB,IAAA8B,EAAAC,KAOH/B,EAAS,KACTgC,EAAa,KAEbD,KAAKjC,MAAMI,YACbF,EACE1B,EAAAC,EAAAC,cAAA,WACGuD,KAAKjC,MAAME,OAAOiC,IAAI,SAACjC,EAAQc,GAC9B,OAAOxC,EAAAC,EAAAC,cAAC0D,EAAD,CACLtD,KAAMoB,EAAOpB,KACbD,MAAO,kBAAMmD,EAAKpB,cAAcI,IAChCqB,IAAKnC,EAAOC,GACZlB,OAAQ,SAACqC,GAAD,OAAWU,EAAKP,aAAaH,EAAOpB,EAAOC,WAM7D,IAAMmC,EAAWL,KAAKjC,MAAMM,YAAYY,MAAM,IAAIiB,IAAI,SAACI,EAAIvB,GACzD,OAAOxC,EAAAC,EAAAC,cAAC8D,EAAD,CAAU1C,QAASyC,EAAIF,IAAKrB,EAAO1B,OAAQ,kBAAM0C,EAAKjB,kBAAkBC,QAkBjF,OAfIiB,KAAKjC,MAAMK,mBACb6B,EACE1D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SACE+D,KAAK,OACLzD,SAAUiD,KAAKZ,mBACfG,MAAOS,KAAKjC,MAAMM,cACpB9B,EAAAC,EAAAC,cAAA,SAAIuD,KAAKjC,MAAMM,aACf9B,EAAAC,EAAAC,cAACgE,EAAD,CAAUtD,WAAY6C,KAAKjC,MAAMM,YAAYqC,SAC5CL,IAML9D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASqD,KAAK1B,gBAAtB,YACA/B,EAAAC,EAAAC,cAAA,UAAQE,QAASqD,KAAKtB,uBAAtB,mBACCT,EACAgC,UArHSU,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5cf8f63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Person.css'\r\n\r\nconst Person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>Person this here. My name {props.name}</p>\r\n            <p>{props.children}</p>\r\n            <input onChange = {props.change}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\n\r\nconst Validate = (props) => {\r\n    let validateLength = 'Text too short'\r\n    if (props.textLength > 5) {\r\n        validateLength = 'Text too enough'\r\n    }\r\n    return <div>\r\n        {validateLength}\r\n    </div>\r\n}\r\n\r\nexport default Validate","import React from 'react';\r\n\r\nconst CharCard = (props) => {\r\n    const style = {\r\n        display: 'inline-block',\r\n        padding: '16px',\r\n        margin: '16px',\r\n        border: '2px solid block',\r\n        textAlign: 'center',\r\n        backgroundColor: 'yellow'\r\n    }\r\n    return (\r\n        <div onClick={props.delete} style={style}>{props.varchar}</div>\r\n    )\r\n}\r\n\r\nexport default CharCard","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../MasterCss/App.css';\nimport '../Person/Person';\nimport Person from '../Person/Person';\nimport Validate from '../Validate/Validate';\nimport CharCard from '../CharCard/CharCard';\n\nclass App extends Component {\n  // this state area\n  state = {\n    name: 'A',\n    age: 23,\n    person: [\n      { id: 'asw', name: 'Meiio', age: 19 },\n      { id: 'wqd', name: 'Pori', age: 9 },\n      { id: 'dfr', name: 'Kiro', age: 10 }\n    ],\n    isShowDiv: false,\n    isShowAssignment: false,\n    inputValues: ''\n  }\n\n  onClickShowDiv = () => {\n    const show = this.state.isShowDiv\n    this.setState({ isShowDiv: !show })\n  }\n\n  onClickShowAssignment = () => {\n    const show = this.state.isShowAssignment\n    this.setState({ isShowAssignment: !show })\n  }\n\n  onChickDelete = (personIndex) => {\n    const person = this.state.person\n    person.splice(personIndex, 1)\n    this.setState({ person: person })\n  }\n\n  onChickDeleteCard = (index) => {\n    const card = this.state.inputValues.split('')\n    card.splice(index, 1)\n    const newCard = card.join('')\n    this.setState({ inputValues: newCard })\n  }\n\n  inputChangeHendler = (event) => {\n    this.setState({ inputValues: event.target.value })\n  }\n\n  onChangeName = (event, id) => {\n    const perosIndex = this.state.person.findIndex(p => {\n      //p is mean parameter name from person\n      return p.id === id\n    })\n\n    //copy sperson aray by index id\n    const perosnNew = {\n      ...this.state.person[perosIndex]\n    }\n\n    //set value\n    perosnNew.name = event.target.value\n\n    //compy person type aray\n    const person = [...this.state.person]\n\n    //set values by index id\n    person[perosIndex] = perosnNew\n\n\n    //set state\n    this.setState({ person: person })\n\n  }\n\n  render() {\n    // this are css in line\n    const colorBtn = {\n      color: 'green',\n      backgroundColor: 'yellow'\n    }\n\n    let person = null\n    let Assignment = null\n\n    if (this.state.isShowDiv) {\n      person = (\n        <div>\n          {this.state.person.map((person, index) => {\n            return <Person\n              name={person.name}\n              click={() => this.onChickDelete(index)}\n              key={person.id}\n              change={(event) => this.onChangeName(event, person.id)} />\n          })}\n        </div>\n      )\n    }\n\n    const charList = this.state.inputValues.split('').map((ch, index) => {\n      return <CharCard varchar={ch} key={index} delete={() => this.onChickDeleteCard(index)} />\n    })\n\n    if (this.state.isShowAssignment) {\n      Assignment = (\n        <div>\n          <p>Show assignment</p>\n          <input\n            type='text'\n            onChange={this.inputChangeHendler}\n            value={this.state.inputValues} />\n          <p>{this.state.inputValues}</p>\n          <Validate textLength={this.state.inputValues.length} />\n          {charList}\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <p>Hello world</p>\n        <button onClick={this.onClickShowDiv}>Show Div</button>\n        <button onClick={this.onClickShowAssignment}>Show Assignment</button>\n        {person}\n        {Assignment}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './MasterPage/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}