{"version":3,"sources":["MasterCss/App.css","Person/Person.js","Validate/Validate.js","CharCard/CharCard.js","MasterPage/App.js","serviceWorker.js","index.js","Person/Person.css","CharCard/CharCard.css"],"names":["module","exports","App","App-logo","App-logo-spin","App-header","App-link","red","bold","HelloWorld","Red","yellow","Person","props","react_default","a","createElement","className","css","onClick","click","name","children","onChange","change","Validate","validateLength","textLength","CharCard","card","delete","varchar","state","age","person","id","isShowDiv","isShowAssignment","inputValues","onClickShowDiv","show","_this","setState","onClickShowAssignment","onChickDelete","personIndex","splice","onChickDeleteCard","index","split","newCard","join","inputChangeHendler","event","target","value","onChangeName","perosIndex","findIndex","p","perosnNew","Object","objectSpread","toConsumableArray","_this2","this","Assignment","btnColor","map","src_Person_Person","key","charList","ch","src_CharCard_CharCard","type","src_Validate_Validate","length","classes","push","Component","Boolean","window","location","hostname","match","ReactDOM","render","MasterPage_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5ea51ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1vqTB\",\"App-logo\":\"App_App-logo__26u38\",\"App-logo-spin\":\"App_App-logo-spin__3vzbW\",\"App-header\":\"App_App-header__3cXPs\",\"App-link\":\"App_App-link__1SBqe\",\"red\":\"App_red__1TPgQ\",\"bold\":\"App_bold__5Sbrr\",\"HelloWorld\":\"App_HelloWorld__27Zsu\",\"Red\":\"App_Red__2HRpB\",\"yellow\":\"App_yellow__3Cz1H\"};","import React from 'react';\r\nimport css from './Person.css';\r\n\r\n\r\nconst Person = (props) => {\r\n\r\n    return (\r\n        <div className={css.Person}>\r\n            <p onClick={props.click}>Person this here. My name {props.name}</p>\r\n            <p>{props.children}</p>\r\n            <input onChange={props.change}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\n\r\nconst Validate = (props) => {\r\n    let validateLength = 'Text too short'\r\n    if (props.textLength > 5) {\r\n        validateLength = 'Text too enough'\r\n    }\r\n    return <div>\r\n        {validateLength}\r\n    </div>\r\n}\r\n\r\nexport default Validate","import React from 'react';\r\nimport css from './CharCard.css';\r\n\r\nconst CharCard = (props) => {\r\n    return (\r\n        <div className={css.card} onClick={props.delete}>{props.varchar}</div>\r\n    )\r\n}\r\n\r\nexport default CharCard","import React, { Component } from 'react';\r\nimport css from '../MasterCss/App.css';\r\nimport '../Person/Person';\r\nimport Person from '../Person/Person';\r\nimport Validate from '../Validate/Validate';\r\nimport CharCard from '../CharCard/CharCard';\r\n\r\n\r\nclass App extends Component {\r\n  // this state area\r\n  state = {\r\n    name: 'A',\r\n    age: 23,\r\n    person: [\r\n      { id: 'asw', name: 'Meiio', age: 19 },\r\n      { id: 'wqd', name: 'Pori', age: 9 },\r\n      { id: 'dfr', name: 'Kiro', age: 10 }\r\n    ],\r\n    isShowDiv: false,\r\n    isShowAssignment: false,\r\n    inputValues: ''\r\n  }\r\n\r\n  onClickShowDiv = () => {\r\n    const show = this.state.isShowDiv\r\n    this.setState({ isShowDiv: !show })\r\n  }\r\n\r\n  onClickShowAssignment = () => {\r\n    const show = this.state.isShowAssignment\r\n    this.setState({ isShowAssignment: !show })\r\n  }\r\n\r\n  onChickDelete = (personIndex) => {\r\n    const person = this.state.person\r\n    person.splice(personIndex, 1)\r\n    this.setState({ person: person })\r\n  }\r\n\r\n  onChickDeleteCard = (index) => {\r\n    const card = this.state.inputValues.split('')\r\n    card.splice(index, 1)\r\n    const newCard = card.join('')\r\n    this.setState({ inputValues: newCard })\r\n  }\r\n\r\n  inputChangeHendler = (event) => {\r\n    this.setState({ inputValues: event.target.value })\r\n  }\r\n\r\n  onChangeName = (event, id) => {\r\n    const perosIndex = this.state.person.findIndex(p => {\r\n      //p is mean parameter name from person\r\n      return p.id === id\r\n    })\r\n\r\n    //copy sperson aray by index id\r\n    const perosnNew = {\r\n      ...this.state.person[perosIndex]\r\n    }\r\n\r\n    //set value\r\n    perosnNew.name = event.target.value\r\n\r\n    //compy person type aray\r\n    const person = [...this.state.person]\r\n\r\n    //set values by index id\r\n    person[perosIndex] = perosnNew\r\n\r\n\r\n    //set state\r\n    this.setState({ person: person })\r\n\r\n  }\r\n\r\n  render() {\r\n    // this are css in line\r\n\r\n\r\n    let person = null\r\n    let Assignment = null\r\n    let btnColor = ''\r\n\r\n\r\n    if (this.state.isShowDiv) {\r\n      person = (\r\n        <div>\r\n          {this.state.person.map((person, index) => {\r\n            return <Person\r\n              name={person.name}\r\n              click={() => this.onChickDelete(index)}\r\n              key={person.id}\r\n              change={(event) => this.onChangeName(event, person.id)} />\r\n          })}\r\n        </div>\r\n      )\r\n      btnColor = css.yellow\r\n    }\r\n\r\n    const charList = this.state.inputValues.split('').map((ch, index) => {\r\n      return <CharCard varchar={ch} key={index} delete={() => this.onChickDeleteCard(index)} />\r\n    })\r\n\r\n    if (this.state.isShowAssignment) {\r\n      Assignment = (\r\n        <div>\r\n          <p>Show assignment</p>\r\n          <input\r\n            type='text'\r\n            onChange={this.inputChangeHendler}\r\n            value={this.state.inputValues} />\r\n          <p>{this.state.inputValues}</p>\r\n          <Validate textLength={this.state.inputValues.length} />\r\n          {charList}\r\n        </div>\r\n      )\r\n        btnColor = css.Red\r\n    }\r\n\r\n    //let classes = ['red','bold'].join(' ')\r\n    const classes = []\r\n    if (this.state.person.length <= 2) {\r\n      classes.push(css.red)\r\n    }\r\n    if (this.state.inputValues.length > 5) {\r\n      classes.push(css.bold)\r\n    }\r\n\r\n    return (\r\n      <div className={css.HelloWorld}>\r\n        <p className={classes.join(' ')}>Hello world</p>\r\n        <button className={btnColor} onClick={this.onClickShowDiv}>Show Div</button>\r\n        <button className={btnColor} onClick={this.onClickShowAssignment}>Show Assignment</button>\r\n        {person}\r\n        {Assignment}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './MasterPage/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__27NzE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CharCard_card__3zXLD\"};"],"sourceRoot":""}